??PBSmodelling
packageStatus()
library(rstan)
a <- dunif(seq(0,1,by=0.01))
plot(a)
integrate(exp,0,1)
exp
exp(1)-1
library(MCMCpack)
source("")
ricker <- function( x,r,k )
{
x*exp(r*(1-x/k))
}
ricker(500,0.2,1000)
S <- 1:1000
R <- ricker(S,0.2,1000)
plot(S,R)
R <- ricker(S,0.5,1000)
plot(S,R)
R <- ricker(S,0.7,1000)
plot(S,R)
plot(S,R/S)
??registerDoParallel
??stopCluster
library(parallel)
detectCores()
exp(-6)
exp(-0.8)
?seq
?MCMCmetrop1R
??MCMCmetrop1R
require(parallel)
?parallel
?foreach
library(foreach)
?foreach
??foreach
library(dplyr)
?dplyr
?parallel
?foreach
source("/Users/rossi/mooseModTMB/mooseMod.R")
install.packages("stringr")
library(stringr)
library(TMB)
run_mcmc()
library(TMB)
sessionInfo()
install.packages("TMB")
library(TMB)
run_mcmc()
library(TMB)
sessionInfo()
install.packages("TMB")
?install.packages("TMB")
install.packages("~/adcomp/TMB_1.7.1.tar.gz",repos=NULL)
install.packages("~/adcomp/TMB_1.7.1.tar.gz",repos=NULL,type="source")
library(TMB)
sessionInfo()
run_mcmc()
source("/Users/rossi/codTMB/codTMB.R")
library(dplyr)#
library(TMB)#
source("mseRtools.r")#
source("codTools.R")#
#
## Build data objects from datasets ---------------------------------------- ###
catchDat <- lisread("sGSL/scaCatch.dat") %>%#
            .[[1]] %>%#
            .[,c(1,3)] %>%#
            as.data.frame()#
colnames(catchDat) <- c("year","tonnes")#
#
# Observed annual catches#
obsC_t <- catchDat$tonnes#
#
# Survey indices#
indexDat <- lisread("sGSL/scaIndex.dat")#
indexDat$comFish <- -1 + 0*indexDat$DFO_RV#
obsI_it <- rbind( indexDat$comFish, indexDat$DFO_RV, indexDat$MS, indexDat$LL )#
obsIfrac_i <- c(0,indexDat$fracYearSurvey)#
#
# Age data#
ageDat <- lisread("sGSL/scaAges.dat")#
#
# Weight-at-age#
wtAge_at <- ageDat$"wtAge (1,plusGroupAge,1,nT)"#
wtAge_at <-wtAge_at / 1000#
#
year <- catchDat$year   # Model years#
nT   <- length(year)    # Number of time steps (years)#
nA   <- 12              # Number of age classes#
nI   <- 4               # Number of surveys#
#
# Observed proportions at age#
obsP_ait <- array( data=-1, dim=c(nA,nI,nT) )#
obsP_ait[ ,1, ] <- ageDat$paaComFish#
obsP_ait[ ,2, ] <- ageDat$paaRV#
obsP_ait[ ,3, ] <- ageDat$paaMS#
obsP_ait[ ,4, ] <- ageDat$paaLL#
#
minAge_i <- ageDat$minAge#
maxAge_i <- ageDat$maxAge#
initT_i  <- ageDat$ageFirstYear#
lastT_i  <- ageDat$ageLastYear#
#
# Assign age block to each age class#
mIdx_a       <- rep(0,nA)#
mIdx_a[5:8]  <- 1#
mIdx_a[9:nA] <- 2#
#
# Base natural mortality by age block#
initM <- c(0.2,0.2,0.2)#
#
# Number of process error age blocks#
# All ages > nK will be share an M value with age nK#
nK <- 8#
# Index of age blocks for process errors#
eIdx_a        <- 0:(nA-1)#
eIdx_a[nK:nA] <- nK-1#
#
scaRep <- lisread("scacod.rep")#
#
## Build objective function ------------------------------------------------ ###
data <- list( mIdx_a     = mIdx_a,#
              initM      = initM,#
              eIdx_a     = eIdx_a,#
              minAge_i   = minAge_i,#
              maxAge_i   = maxAge_i,#
              initT_i    = initT_i,#
              lastT_i    = lastT_i,#
              obsC_t     = obsC_t,#
              obsI_it    = obsI_it,#
              obsIfrac_i = obsIfrac_i,#
              wtAge_at   = wtAge_at,#
              obsP_ait   = obsP_ait )#
#
pars   <- buildList("init")    # Initial parameter values#
lb     <- buildList("lb")      # Lower parameter bounds#
ub     <- buildList("ub")      # Upper parameter bounds#
map    <- buildList("est")     # Fixed parameters#
random <- buildList("random")  # Random effects#
#
pars$logInitN_a <- log( scaRep$Nta[1,-1] )#
pars$logR_t     <- log( scaRep$Nta[ ,1] )#
#
# Remove fixed parameters from bounds#
member <- function(x,y) !is.na(match(x,y))#
lb <- unlist(lb[!member(names(lb),names(map))])#
ub <- unlist(ub[!member(names(ub),names(map))])#
#
# Compile#
dyn.load( dynlib("codTMB") )#
obj <- MakeADFun( data       = data,#
                  parameters = pars,#
                  map        = map,#
                  random     = random )
exp(-0.41)
1-exp(-0.41)
pbeta
library(TMB)
n = 100#
 x = rnorm(n=n,mean=0,sd=1)
f_integrated = MakeADFun(data=list(x=x),parameters=list(mu=0,sigma=1),random="mu")
# Georges Bank Yellowtail Flounder#
#
rm(list=ls())#
source("codDefault.R")#
#
fitModel <- function( scen, all )#
{#
#
  ctl         <- list()#
  ctl$recType <- all[scen,"recType"]#
  ctl$qType   <- all[scen,"qType"]#
  ctl$mType   <- all[scen,"mType"]#
  ctl$sType   <- all[scen,"sType"]#
  ctl$dome    <- all[scen,"dome"]#
  ctl$jType   <- all[scen,"jType"]#
  ctl        <<- ctl#
#
  source("codDefault.R")#
  source("gbCod.R")#
  source("codRun.R")#
#
  fit <- ifelse( is.character(opt), 0, 1 )#
#
  name <- paste("model",scen,sep="")#
  osa <- getOSA()#
#
  gbCod <- list( rpt   = rpt,#
                 est   = est,#
                 retro = retro,#
                 osa   = osa )#
  save( gbCod,#
        file=paste(name,".Rdata",sep="") )#
#
  result <- as.numeric(c(scen,fit,aic,nll,nPar,all[scen, ]))#
  names(result) <- c("model","fit","aic","nll","nPar",names(all[scen,]))#
#
  return(result)#
}#
#
folder <- "Jul8"#
system(paste("mkdir",folder))#
#
all <- getScenarios()#
nModels <- nrow(all)
N0 <- 1000
M <- 0.2
N <- numeric(100)
N[1] <- N0
for(t in 2:100)
N[t] <- N[t-1]*exp(-M)
N
plot(N)
M <- 0.02
for(t in 2:100)
N[t] <- N[t-1]*exp(-M)
N
barplot(N)
M <- 0.02
N <- numeric(100)
N[1] <- 100
for( i in 2:100 )
N[i] <- N[i-1]*M
NM
N
for( i in 2:100 )
N[i] <- N[i-1]*exp(-M)
N
barplot(N)
M
M <- 2*M
for( i in 2:100 )
N[i] <- N[i-1]*exp(-M)
barplot(N)
abline(v=22)
# Georges Bank Yellowtail Flounder#
#
rm(list=ls())#
source("codDefault.R")#
#
#       deltaAIC model#
#  1    0.000000    32#
#  2    1.985708    64#
#  3   14.288220    62#
#
fitModel <- function( scen, all )#
{#
#
  ctl         <- list()#
  ctl$recType <- all[scen,"recType"]#
  ctl$qType   <- all[scen,"qType"]#
  ctl$mType   <- all[scen,"mType"]#
  ctl$sType   <- all[scen,"sType"]#
  ctl$dome    <- all[scen,"dome"]#
  ctl$jType   <- all[scen,"jType"]#
  ctl        <<- ctl#
#
  source("codDefault.R")#
  source("gbCod.R")#
  source("codRun.R")#
#
  fit <- ifelse( is.character(opt), 0, 1 )#
#
  name <- paste("model",scen,sep="")#
  #osa <- getOSA()#
  osa <- NULL#
#
  gbCod <- list( rpt   = rpt,#
                 est   = est,#
                 retro = retro,#
                 osa   = osa )#
  save( gbCod,#
        file=paste(name,".Rdata",sep="") )#
#
  result <- as.numeric(c(scen,fit,aic,nll,nPar,all[scen, ]))#
  names(result) <- c("model","fit","aic","nll","nPar",names(all[scen,]))#
#
  return(result)#
}#
#
folder <- "Sep2018"#
system(paste("mkdir",folder))#
#
all <- getScenarios()#
nModels <- nrow(all)
install.packages("logitnorm")
source("/Users/rossi/tunaMBB/test.R")
x_t
err_t <- .fillRanWalk( gamma=gamma, sigma=sigma, deltat=rnorm(nT) )
x_t <- rep(1,nT)
for( t in 2:nT )
x_t[t] <- x_t[t-1]*err_t[t-1]
x_t
plot(x_t)
err_t
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
plot(x_t)
ac <- ar(x_t,order.max=3,aic=0)$ar
ac
sd(x_t)
sd(err_t)
sqrt(ac)
source("/Users/rossi/tunaMBB/test.R")
ac <- ar(x_t,order.max=3,aic=0)$ar
ac
?ar
plot(err_t)
plot(x_t)
source("/Users/rossi/tunaMBB/test.R")
cor(x_t[-1],x_t[-nT])
err_t <- .fillRanWalk( gamma=gamma, sigma=sigma, deltat=rnorm(nT) )
err_t
err_t/mean(err_t)
mean(err_t/mean(err_t))
mean(err_t)
source("/Users/rossi/tunaMBB/test.R")
cor(ac[-1]/ac[-nT])
cor(x_t[-1]/x_t[-nT])
x_t <- .fillRanWalk( gamma=gamma, sigma=sigma, deltat=rnorm(nT) )
x_t <- x_t/mean(x_t)
cor(x_t[-1]/x_t[-nT])
x_t
cor(x_t[-1],x_t[-nT])
ac
cor(x_t[-nT],x_t[-1])
source("/Users/rossi/tunaMBB/test.R")
source("/Users/rossi/tunaMBB/tunaMBB.R")
cor(x_t[-1],x_t[-nT])
expx_t
log(expx_t)
x_t
source("/Users/rossi/tunaMBB/tunaMBB.R")
x_t
source("/Users/rossi/tunaMBB/tunaMBB.R")
x_t
e_t <- x_t[-1] - x_t[-nT]
e_t
hist(e_t)
mean(e_t)
median(e_t)
source("/Users/rossi/tunaMBB/tunaMBB.R")
ar(x_t,order.max=1,aic=0)$ar
ar(x_t,order.max=2,aic=0)$ar
ar(x_t,order.max=3,aic=0)$ar
ar(x_t,order.max=10,aic=0)$ar
source("/Users/rossi/tunaMBB/tunaMBB.R")
ar(x_t,order.max=3,aic=0)
ar(x_t,order.max=3)
?ar(x_t,order.max=3)
source("/Users/rossi/tunaMBB/tunaMBB.R")
ar(x_t,order.max=3)
ar(x_t,order.max=1)
ar(x_t,order.max=3,aic=0)
source("/Users/rossi/tunaMBB/tunaMBB.R")
acb <- mean(tsb$t[ ,nT+i])
acb-ac
source("/Users/rossi/tunaMBB/tunaMBB.R")
ac_l
plot(ac_l)
source("/Users/rossi/tunaMBB/tunaMBB.R")
plot(ac_l)
source("/Users/rossi/tunaMBB/tunaMBB.R")
plot(ac_l)
plot(ac_l,ylim=c(-0.4,0))
ac_l
source("/Users/rossi/tunaMBB/tunaMBB.R")
plot(ac_l)
plot(ac_l,ylab="")
plot(ac_l,ylab="delta lag-1 (boot-hist)")
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylab=c(-0.6,0))
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.6,0))
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0))
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i")
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i",las=1)
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i",las=1);grid()
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i",las=1);grid();box()
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i",las=1,xlab="Block length");grid();box()
source("/Users/rossi/tunaMBB/tunaMBB.R")
plot(ac_l,ylab="delta lag-1 (boot-hist)",ylim=c(-0.4,0),yaxs="i",las=1,xlab="Block length");grid();box()
??tsclust
library(dtwclust)
a <- rep(5,10)
a[4] <- 7
b <- a-5
d <- a-4
f <- a-3
z <- rbind( a,a,a,a,b,b,b,b,a,a,a,d,d,d,d,d,d,f,f,f,f,f,a,a,a,a,a,f )
zz <- tsclust( z )
plot(zz)
z <- rbind( a,a,a,a,b,b,b,b,a,a,a,a,b,b,b,b,a,a,a,a,b,b,b,b )
zz <- tsclust( z )
plot(zz)
zz <- tsclust( z, k=3 )
library(dtwclust)
a <- rep(5,10)
a[4] <- 7
b <- a-5
d <- a-4
f <- a-3
z <- rbind( a,a,a,a,b,b,b,b,a,a,a,a,b,b,b,b,a,a,a,a,b,b,b,b )
zz <- tsclust( z )
68/7
setwd("/Users/rossi/AtlanticBluefinTuna/testDDMP")
compile("tunaDelay.cpp")
source("/Users/rossi/AtlanticBluefinTuna/testDDMP/initTest.R")
compile("tunaDelay.cpp")
